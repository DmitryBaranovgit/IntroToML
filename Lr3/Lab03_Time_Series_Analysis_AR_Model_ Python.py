# -*- coding: utf-8 -*-
"""Баранов Д.А. ИВТ 2.1. ЛР - Временные ряды. Основы. Модель AR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qaVoFW5mutANdQiBADMgTP7JnWIhft48

Автор: Баранов Д.А. ИВТ 2.1
**Лабораторная работа: Временные ряды. Модель AR.**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.ar_model import AutoReg
from statsmodels.graphics.tsaplots import plot_pacf

"""Загрузка данных и визуализация"""

data = pd.read_csv('tovar_moving.csv', parse_dates = ['date'], index_col = 'date')
data = data.sort_index()
ts = data['qty']

ts.plot(figsize = (12, 6), title = 'Количество заказов по дням')
plt.xlabel('Дата')
plt.ylabel('Количество заказов')
plt.grid()
plt.show()

"""Шаг 1: Отложить в **test** последнее значение временного ряда"""

train = ts.iloc[:-1]
test = ts.iloc[-1]
print(f"Фактическое последнее значение (Test): {test}")

"""Шаг 2: Анализ временного ряда на наличие тренда и сезонности"""

# Скользящее среднее и стандартное отклонение
rolling_mean = train.rolling(window = 30).mean()
rolling_std = train.rolling(window = 30).std()

plt.figure(figsize = (12, 6))
plt.plot(train, label = 'Исходный ряд')
plt.plot(rolling_mean, color = 'red', label = 'Скользящее среднее')
plt.plot(rolling_std, color = 'black', label = 'Скользящее std')
plt.legend()
plt.title('Анализ тренда и сезонности')
plt.grid()
plt.show()

"""Вывод:
Скользящее среднее изменяется со временем, значит, есть тренд.

Присутствуют колебания со стабильной амплитудой через одинаковые промежутки времени, что указывает на наличие признаков сезонности.

Шаг 3: Экспоненциальное сглаживание (alpha = 0.7)
"""

alpha = 0.7
forecast_ses = train.ewm(alpha = alpha, adjust = False).mean().iloc[-1]
print(f"Прогноз с помощью экспоненциального сглаживания: {forecast_ses:.2f}")
print(f"Фактическое значение: {test:.2f}")

error_ses = abs(forecast_ses - test)
print(f"Ошибка прогноза экспоненциального сглаживания: {error_ses:.2f}")

"""Шаг 4: Проверка ряда на стационарность, определение порядка интегрирования"""

adf_result = adfuller(train)
print('ADF Statisric (Исходный ряд):', adf_result[0])
print('p-value (Исходный ряд):', adf_result[1])

if adf_result[1] < 0.05:
  print("Ряд стационарный, интегрирование не требуется.")
  train_diff = train.copy()
  d = 0
else:
  print("Ряд нестационарный - требуется интегрирование (разность).\n")
  train_diff = train.diff().dropna()
  d = 1

  adf_result_diff = adfuller(train_diff)
  print('ADF Statistic (после первой разности):', adf_result_diff[0])
  print('p-value (после первой разности):', adf_result_diff[1])

  if adf_result_diff[1] < 0.05:
    print("Ряд после первой разности стал стационарным.")
  else:
    print("Ряд всё ещё не стационарный, возможно требуется ещё разность.")

"""Шаг 5: Определение порядка модели AR по графику частичной автокорреляции (PACF)"""

plot_pacf(train.dropna(), lags = 30, method = 'ywm')
plt.title('PACF исходного ряда')
plt.grid()
plt.show()

"""Значения PACF значительно снижаются после первого лага и выходят за доверительный интервал. Это указывает на то, что порядок модели AR(p) равен 2.

Шаг 6: Построение модели AR и предсказание последнего значения ряда.
"""

model = AutoReg(train, lags = 2, old_names = False)
model_fit = model.fit()

forecast_ar = model_fit.predict(start = len(train), end = len(train))
print(f"Прогноз AR модели: {forecast_ar.iloc[0]:.2f}")

error_ar = abs(forecast_ar.iloc[0] - test)
print(f"Ошибка прогноза AR модели: {error_ar:.2f}\n")

"""Шаг 7: Сравнение результатов"""

pd.set_option('display.expand_frame_repr', False)
pd.set_option('display.width', 200)

comparison = pd.DataFrame({
    'Метод': ['Экспоненциальное сглаживание (alpha = 0.7)', 'Авторегрессия (AR(2))'],
    'Прогноз': [round(forecast_ses, 2), round(forecast_ar.iloc[0], 2)],
    'Фактическое значение': [test, test],
    'Ошибка прогноза': [round(error_ses, 2), round(error_ar, 2)]
})

print(comparison.to_string(
    index = False,
    formatters = {
        'Метод': '{:^50}'.format,
        'Прогноз': '{:^15,.2f}'.format,
        'Фактическое значение': '{:^15,.2f}'.format,
        'Ошибка прогноза': '{:^15,.2f}'.format
    },
    justify = 'center')
)

if error_ses < error_ar:
  print("\nМетод экспоненциального сглаживания дал более точный прогноз.")
else:
  print("\nМодель авторегрессии дала более точный прогноз.")